What happens when you initialize a repository? Why do you need to do it?

When you git init, you create an empty repository in a directory. There are no commits saved initially, but there are files that are untracked. 

You need to initialize a repository because otherwise git doesnt have anything to save commits to. The files are simply files, rather than saved and tracked together. 

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is a temporary space where you can make changes prior to commiting to a repo. 

The working directory is active, the repo saves things in different states, but the staging area is a sort of middle ground to move files around. 

How can you use the staging area to make sure you have one commit per logical change?

You can compare changes in the working directory to the staging area before adding documents, to be sure what is happening.

Then you can compare what is in the staging area to the current commit to be sure that you commit only what you expect. 

What are some situations when branches would be helpful in keeping your history organized? 
How would branches help?

If you are interested in making changes that may not be certain or are 
only being tested, branches could be helpful in realizing its a 
different version. Also, if you are working on something with others,
making your changes in a branch might let you test out your version
without messing up theirs. Branches help because they allow the master
to stay constant without having to jump back and forth. 

How do the diagrams help you visualize the branch structure?

More than most concepts, branches represent something akin to actual physical branches.
Its easier to think about how something could branch off, and how you can't reach it in the visual state. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When you merge two branches, all the parent commits are combined to keep changes for all versions. 
The diagram shows the history of both branches coming out of the new master, because all previous commits are saved and reachable. 

What are the pros and cons of Git's automatic merging vs always doing merges manually?

Pros:
Catches many changes from many commits
Fairly intelligent in seeing if things were deleted/added
Manual takes time to make decisions

Cons:
Possible that things are duplicated 
Not all functions register as conflicts to resolve
